"""
Django settings for config project.

Generated by 'django-admin startproject' using Django 5.2.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

from pathlib import Path
import os
import environ
import sentry_sdk
import dj_database_url


env = environ.Env()

# Build paths inside the project like this: BASE_DIR / 'subdir'.
# 프로젝트 Root Path
BASE_DIR = Path(__file__).resolve().parent.parent


# environ.Env.read_env(f"{BASE_DIR}/.env")
# 위 방식은 경로 지정에 실수를 할 수 있음
# 아래 방식은 실수를 줄여줌
environ.Env.read_env(os.path.join(BASE_DIR, ".env"))

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
# SECRET_KEY = "django-insecure-+zc-9=9t0cbd+^a)fffoe=@tir65-o&a7!(o#)o=m(z5&#m8@h"
# .env에서 SECRET_KEY의 값을 불러옴
SECRET_KEY = env("SECRET_KEY")

# SECURITY WARNING: don't run with debug turned on in production!
# 프론트엔드의 api에서 페이지를 찾을 수 없거나 에러가 생겼을 때 나오는 페이지
# 배포 할 때는 사용자가 볼 수 없도록 디버그를 꺼버려야 함
# RENDER라는 환경변수의 존재 여부에 따라 DEBUG를 켜고 꺼야 함
DEBUG = "RENDER" not in os.environ

# 개발 환경에서는 건들 필요 없지만 배포 시에는(DEBUG가 False일 때) 설정을 해 줘야 함
# ALLOWED_HOSTS는 앱을 실행시킬 수 있는 도메인 목록임
# ["https://google.com"]: google.com만 이 앱을 실행시킬 수 있음
ALLOWED_HOSTS = []
# Render는 이를 해주는 장치가 따로 있음
# 외부로 노출시키는 url을 설정: Render가 제공하는 테스트 url이나 개발자가 구입한 도메인 주소
# 렌더에 배포하면 테스트 도메인을 RENDER_EXTERNAL_HOSTNAME 환경변수에 넣어 줌
# 렌더가 만든 서버를 장고에서 실행할 수 있도록 설정해주는 것
RENDER_EXTERNAL_HOSTNAME = os.environ.get("RENDER_EXTERNAL_HOSTNAME")
if RENDER_EXTERNAL_HOSTNAME:
    ALLOWED_HOSTS.append(RENDER_EXTERNAL_HOSTNAME)

# Application definition

THIRD_PARTY_APPS = [
    "rest_framework",
    # "rest_framework.authtoken"을 추가해주는 것만으로도 Admin Panel에서 새로운 모델을 확인 가능. 새로운 테이블이 생성된 것. 즉, migrate 필요(makemigration은 필요 없음. 자동 생성됨.)
    "rest_framework.authtoken",
    "strawberry.django",
    "corsheaders",
]

CUSTOM_APPS = [
    "common.apps.CommonConfig",
    "users.apps.UsersConfig",
    "rooms.apps.RoomsConfig",
    "experiences.apps.ExperiencesConfig",
    "categories.apps.CategoriesConfig",
    "reviews.apps.ReviewsConfig",
    "wishlists.apps.WishlistsConfig",
    "bookings.apps.BookingsConfig",
    "medias.apps.MediasConfig",
    "direct_messages.apps.DirectMessagesConfig",
]

SYSTEM_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
]

# 장고는 프레임워크이기 때문에 INSTALLED_APPS는 반드시 있어야 함
INSTALLED_APPS = SYSTEM_APPS + THIRD_PARTY_APPS + CUSTOM_APPS

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "whitenoise.middleware.WhiteNoiseMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "corsheaders.middleware.CorsMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]

ROOT_URLCONF = "config.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "config.wsgi.application"


# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases
# 개발 단계에서 sqlite를 사용하는 것은 문제가 없음
# 배포 시에는 PostgreSQL로 작업
if DEBUG:
    DATABASES = {
        "default": {
            "ENGINE": "django.db.backends.sqlite3",
            "NAME": BASE_DIR / "db.sqlite3",
        }
    }
else:
    DATABASES = {
        # Render가 DB를 만들면 DB url을 환경변수로 제공함
        "default": dj_database_url.config(
            # DB 연결이 종료되기 전 연결 유지 시간 설정
            # 하나의 연결에 너무 많은 시간을 소요하지 않는 것이 좋음: 즉, Timeout을 설정
            conn_max_age=600,
        ),
    }


# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = "ko-kr"

TIME_ZONE = "Asia/Seoul"

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_URL = "/static/"

# This production code might break development mode, so we check whether we're in DEBUG mode
if not DEBUG:
    # Tell Django to copy static assets into a path called `staticfiles` (this is specific to Render)
    STATIC_ROOT = os.path.join(BASE_DIR, "staticfiles")

    # Enable the WhiteNoise storage backend, which compresses static files to reduce disk use
    # and renames the files with unique names for each version to support long-term caching
    STATICFILES_STORAGE = "whitenoise.storage.CompressedManifestStaticFilesStorage"

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

AUTH_USER_MODEL = "users.User"

# Place where media is saved
# /없이 사용하면 폴더가 생성됨
MEDIA_ROOT = "uploads"

# 사용자가 접근할 수 있는 URL 경로 지정
# 단지 URL만을 위한 것
# uploads로 기본값을 이용해도 되지만 따로 지정해줄 수 있음
# URL의 경우는 반드시 /로 끝나야 함
MEDIA_URL = "user-uploads/"

# 여러 군데서 사용되는 값을 사전 설정해두면 변경이 필요할 때 여기서만 변경해주면 한꺼번에 모두 변경됨
# Pagination 사이즈 설정
PAGE_SIZE = 3

REST_FRAMEWORK = {
    "DEFAULT_AUTHENTICATION_CLASSES": [
        "rest_framework.authentication.SessionAuthentication",  # default
        "config.authentication.TrustMeBroAuthentication",
        "rest_framework.authentication.TokenAuthentication",
        "config.authentication.JWTAuthentication",
    ]
}

if DEBUG:
    # 서버에 접근 가능하도록 설정할 도메인을 추가해주면 됨
    CORS_ALLOWED_ORIGINS = [
        "http://localhost:5173",
        "http://127.0.0.1:5173",
    ]

    # POST Requests를 허용할 Domain
    CSRF_TRUSTED_ORIGINS = [
        "http://127.0.0.1:5173",
    ]
else:
    CORS_ALLOWED_ORIGINS = ["https://airbnb-clone-frontend-v0pq.onrender.com"]

    CSRF_TRUSTED_ORIGINS = ["https://airbnb-clone-frontend-v0pq.onrender.com"]

# JavaScript에서 HTTP Methods를 이용할 때 Credential(Cookie)를 포함하여 보내도록 허용
CORS_ALLOW_CREDENTIALS = True

# .env에서 가져오기
GH_SECRET = env("GH_SECRET")
CF_ACCOUNT_ID = env("CF_ACCOUNT_ID")
CF_TOKEN = env("CF_TOKEN")

# Sentry: Error Monitoring
# 개발 환경에서는 작동하지 않고 프로덕션 환경에서만 작동하도록 설정
if not DEBUG:
    sentry_sdk.init(
        dsn="https://bfc022ea629f7a4b7849903eca8ff9c6@o4509750320693248.ingest.us.sentry.io/4509750341271552",
        # Add data like request headers and IP for users,
        # see https://docs.sentry.io/platforms/python/data-management/data-collected/ for more info
        send_default_pii=True,
    )

# Render에 무료로 createsuperuser를 하기 위한 것
# Render에서 shell을 이용하여 해야 하지만 유료 서비스임
# 슈퍼유저 자동 생성 시 필요한 설정
if os.environ.get("CREATE_SUPERUSER"):
    os.environ["DJANGO_SUPERUSER_EMAIL"] = os.environ.get("DJANGO_SUPERUSER_EMAIL")
    os.environ["DJANGO_SUPERUSER_USERNAME"] = os.environ.get(
        "DJANGO_SUPERUSER_USERNAME"
    )
    os.environ["DJANGO_SUPERUSER_PASSWORD"] = os.environ.get(
        "DJANGO_SUPERUSER_PASSWORD"
    )
